{"version":3,"sources":["views/Login.js","views/ChangeCredentials.js","utils/validation.js","components/CreateSchema.js","components/CreateNewDocument.js","components/Indexes.js","components/Document.js","components/SchemaDetails.js","components/Schemas.js","components/DatabaseInformation.js","components/CreateDatabase.js","components/UserDocument.js","components/UserControls.js","components/Node.js","components/ClusterControls.js","views/Dashboard.js","App.js","index.js"],"names":["Login","props","cookie","Cookies","_useState","useState","_useState2","Object","slicedToArray","username","setUsername","_useState3","_useState4","password","setPassword","_useState5","_useState6","info","setInfo","handleLogin","_ref","asyncToGenerator","_regeneratorRuntime","mark","_callee","body","response","data","token","wrap","_context","prev","next","abrupt","fetch","concat","process","method","headers","content-type","JSON","stringify","sent","json","status","content","authorization","then","set","window","location","assign","console","log","message","stop","apply","this","arguments","useEffect","get","remove","react_default","a","createElement","Box","className","Paper","elevation","Typography","variant","TextField","autoComplete","type","label","value","onChange","e","target","Button","size","color","onClick","align","ChangeCredentials","handleSubmit","ChangeCredentials_regeneratorRuntime","validateSchema","schemaObject","_JSON$parse","parse","schemaName","schema","valid","fields","keys","isValid","index","length","fieldName","fieldType","CreateSchema","databaseName","jsonSchema","setJsonSchema","_useState7","_useState8","infoColor","setInfoColor","CreateSchema_regeneratorRuntime","validation","creationResponse","jsonResponse","reload","Schema_default","Divider","TableContainer","component","Table","TableHead","TableRow","TableCell","TableBody","Info_default","es","height","width","language","defaultValue","CreateNewDocument","jsonDocument","setJsonDocument","handleCreate","CreateNewDocument_regeneratorRuntime","sx","overflow","Indexes","indexedDocuments","setIndexedDocuments","setFieldName","handleIndex","Indexes_regeneratorRuntime","indexResponse","Document","fullDocument","setFullDocument","_useState9","_id","id","_useState11","_useState12","_useState13","_useState14","handleUpdate","Document_regeneratorRuntime","updateResponse","updateJSON","handleDelete","_ref2","_callee2","_context2","Fragment","options","minimap","enabled","scrollbar","scrollBeyondLastLine","SchemaDetails","view","setView","jsonSchemaUpdate","setJsonSchemaUpdate","updateInfo","setUpdateInfo","updateInfoColor","setUpdateInfoColor","_useState10","deleteInfo","setDeleteInfo","deleteInfoColor","setDeleteInfoColor","deleteDocsInfo","setDeleteDocsInfo","_useState15","_useState16","deleteDocsInfoColor","setDeleteDocsInfoColor","_useState17","_useState18","allDocuments","setAllDocuments","_useState19","_useState20","filteredDocuments","setFilteredDocuments","_useState21","_useState22","documentsView","setDocumentsView","_useState23","_useState24","_useState25","_useState26","operation","setOperation","_useState27","_useState28","compareTo","setCompareTo","fetchDocuments","borderRight","borderColor","borderBottom","List","ListItemButton","map","idx","key","setTimeout","FormControl","minWidth","InputLabel","Select","labelId","MenuItem","document","components_Document","components_CreateNewDocument","components_Indexes","Schemas","schemas","schemaNames","setSchemaName","schemaConnectedTo","setSchemaConnectedTo","connectedToSchema","setConnectedToSchema","name","components_SchemaDetails","DatabaseInformation","setSchemas","setSchemaNames","currentView","setCurrentView","rawSchemas","schemasAsJSONObject","forEach","fullSchema","schema_name","push","parseSchemas","fontWeight","Tabs","viewName","textColor","indicatorColor","Tab","databaseSchema","jsonString","encodeURIComponent","link","href","download","click","components_CreateSchema","components_Schemas","CreateDatabase","setDatabaseName","createInfo","setCreateInfo","importInfo","setImportInfo","importInfoColor","setImportInfoColor","importedDatabaseName","setImportedDatabaseName","importedSchemas","setImportedSchemas","handleCreateDatabase","CreateDatabase_regeneratorRuntime","handleSubmitImport","fileReader","FileReader","readAsText","files","onload","result","undefined","schemasArr","schemaIndex","_fullSchema","hidden","UserDocument","userData","user","setUser","UserControls","allUsers","setAllUsers","fetchAllUsers","newUsername","setNewUsername","newPassword","setNewPassword","newRole","setNewRole","components_UserDocument","role","Node","_props$info","hostname","state","ip","containerName","readToken","substr","ClusterControls","containersInformation","setContainersInformation","refreshInfo","setRefreshInfo","refreshInfoColor","setRefreshInfoColor","scaleInfo","setScaleInfo","scaleInfoColor","setScaleInfoColor","numberOfNodes","setNumberOfNodes","containerInfo","components_Node","Dashboard","allDatabases","setAllDatabases","databaseConnectedTo","setDatabaseConnectedTo","connectedToDatabase","setConnectedToDatabase","mainView","setMainView","handleMainViewChange","Storage_default","fontSize","dbName","components_CreateDatabase","components_DatabaseInformation","components_ClusterControls","components_UserControls","App","react_router_dom","react_router","exact","path","element","views_Login","views_ChangeCredentials","views_Dashboard","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.fc9593ca.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport { Box, Paper, Typography, TextField, Button } from \"@mui/material\";\n\nimport \"../styles/Login.css\";\n\nconst Login = (props) => {\n    const cookie = new Cookies();\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [info, setInfo] = useState(\"\");\n\n    const handleLogin = async () => {\n        setInfo(\"\");\n        if(username === \"\" || username === null) {\n            setInfo(\"Invalid username\");\n            return;\n        }\n\n        if(password === \"\" || password === null) {\n            setInfo(\"Invalid password\");\n            return;\n        }\n\n        const body = { username, password };\n        const response = await fetch(`${process.env.REACT_APP_ADMINCONTROLLER_URL}/auth/login`, {\n            method:\"POST\",\n            headers: {\n                \"content-type\":\"application/json\"\n            },\n            body : JSON.stringify(body)\n        });\n\n        const data = await response.json();\n\n        if(data.status === \"GOOD\") {\n            // verify admin login \n            const token = data.content;\n            fetch(`${process.env.REACT_APP_ADMINCONTROLLER_URL}/auth/user/verifyAdmin`, {\n                method:\"GET\",\n                headers: {\n                    \"authorization\": token\n                }\n            })\n            .then(response => response.json())\n            .then(data => {\n                if(data.status === \"GOOD\") {\n                    cookie.set(\"token\", token);\n                    if(username === \"admin\" && password === \"admin\") {\n                        window.location.assign(\"/creds\");\n                    } else {\n                        // get a token from read controllers\n                        fetch(`${process.env.REACT_APP_READCONTROLLER_URL}/auth/login`, {\n                            method:\"POST\",\n                            headers: {\n                                \"content-type\": \"application/json\"\n                            },\n                            body : JSON.stringify(body)\n                        })\n                        .then(response => response.json())\n                        .then(data => {\n                            console.log(data);\n                            cookie.set(\"read-token\", data.content);\n                            window.location.assign(\"/dashboard\");\n                        });\n                    }\n                } else {\n                    setInfo(data.message);\n                }\n            });\n        } else {\n            setInfo(data.message);\n        }\n    }\n\n    useEffect(()=>{\n        const token = cookie.get(\"token\");\n        if(token) {\n            fetch(`${process.env.REACT_APP_ADMINCONTROLLER_URL}/auth/user/verifyAdmin`, {\n                method:\"GET\",\n                headers: {\n                    \"authorization\": token\n                }\n            })\n            .then(response => response.json())\n            .then(data => {\n                if(data.status === \"GOOD\") {\n                    window.location.assign(\"/dashboard\");\n                } else {\n                    cookie.remove(\"token\");\n                    cookie.remove(\"read-token\");\n                }\n            });\n        } \n    },[]);\n\n    return ( \n        <Box className=\"login-wrapper\">\n            <Paper className=\"flex-col-gap login\" elevation={5}>\n                <Typography variant=\"h4\"> Login </Typography>\n                <TextField \n                    autoComplete=\"off\"\n                    variant=\"outlined\" \n                    type=\"text\" \n                    label=\"Username\" \n                    value={username || ''} \n                    onChange={e => setUsername(e.target.value)} />\n                <TextField \n                    autoComplete=\"off\"\n                    variant=\"outlined\" \n                    type=\"password\" \n                    label=\"Password\" \n                    value={password || ''} \n                    onChange={e => setPassword(e.target.value)} />\n                <Button size=\"large\" color=\"primary\" variant=\"contained\" onClick={handleLogin}> Login </Button>\n                {info && <Typography align=\"center\" variant=\"h6\" color=\"red\"> {info} </Typography>}\n            </Paper>\n        </Box>\n    );\n}\n \nexport default Login;","import React, { useState, useEffect } from 'react';\nimport Cookies from 'universal-cookie';\nimport { Box, Typography, Button, TextField, Paper } from \"@mui/material\";\n\nimport \"../styles/ChangeCredentials.css\";\n\nconst ChangeCredentials = (props) => {\n    const cookie = new Cookies();\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [info, setInfo] = useState(\"\");\n\n    const handleSubmit = async () => {\n        setInfo(\"\");\n        if(username === \"\" || username === null) {\n            setInfo(\"Invalid username\");\n            return;\n        }\n        if(password === \"\" || password === null) {\n            setInfo(\"Invalid password\");\n            return;\n        }\n\n        const token = cookie.get(\"token\");\n        const body = { username, password };\n\n        const response = await fetch(`${process.env.REACT_APP_ADMINCONTROLLER_URL}/admin/user/update`, {\n            method: \"PUT\",\n            headers: {\n                \"content-type\":\"application/json\",\n                \"authorization\": token\n            },\n            body: JSON.stringify(body)\n        });\n\n        const data = await response.json();\n        if(data.status === \"GOOD\") {\n            cookie.remove(\"token\");\n            window.location.assign(\"/\");\n        } else {\n            setInfo(data.message);\n        }\n    }\n\n    useEffect(()=>{\n        const token = cookie.get(\"token\");\n        if(token == null) {\n            window.location.assign(\"/\");\n        } \n    },[])\n\n    return (\n        <Box className=\"change-wrapper\">\n            <Paper elevation={6} className=\"change shadow\">\n                <Typography color=\"primary\" variant=\"h4\"> Admin Credentials </Typography>\n                <TextField label=\"Username\" type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} variant=\"outlined\" />\n                <TextField label=\"Password\" type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} variant=\"outlined\" />\n                <Button variant=\"contained\" onClick={handleSubmit}> Change credentials </Button>\n                { info && <Typography color=\"red\">{info}</Typography> }\n            </Paper>\n        </Box>\n    );\n}\n\nexport default ChangeCredentials;","export const validateSchema = (schemaObject) => {\n    try {\n        const { schemaName, schema } = JSON.parse(schemaObject);\n        if(!schemaName) return { valid:false, color:\"red\", info:\"Invalid schema name\" };\n        if(!schema) return { valid:false, color:\"red\", info:\"Invalid schema\" };\n\n        const fields = Object.keys(schema);\n        var isValid = true;\n        for(var index = 0; index < fields.length; index++){\n            var fieldName = fields[index];\n            if(fieldName === \"\" || fieldName === null)\n                return { valid:false, color: \"red\", info :\"Schema contains invalid fields\" };\n            \n            var fieldType = schema[fieldName];\n            if(fieldType !== \"Boolean\" && fieldType !== \"Integer\" && fieldType !== \"String\" && fieldType !== \"Array\"){\n                isValid = false;\n            }\n        }\n        if(isValid)\n            return { valid: true, color:\"green\", info:\"New schema created\" };\n        else\n            return { valid:false, color: \"red\", info :\"Schema contains invalid field types\" };\n    } catch (e) {\n        return {valid: false, color:\"red\", info:\"Invalid json\" }\n    }\n}","import React, { useState } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport { Typography, Box, Divider, TableBody, Table, TableRow, \n        TableHead, TableCell, TableContainer, Paper, Button } from \"@mui/material\";\nimport Editor from \"@monaco-editor/react\";\nimport { validateSchema } from \"../utils/validation\";\nimport SchemaIcon from '@mui/icons-material/Schema';\nimport InfoIcon from '@mui/icons-material/Info';\nimport \"../styles/CreateSchema.css\";\n\nconst sampleSchema = `{\n    \"schemaName\": \"exampleSchema\",\n    \"schema\": {\n        \"fieldName\":\"fieldType\"\n    }\n}`\n\nconst CreateSchema = (props) => {\n    const cookie = new Cookies();\n    const { databaseName } = props;\n    const [token] = useState(cookie.get(\"token\"));\n    const [jsonSchema, setJsonSchema] = useState(sampleSchema);\n    const [info, setInfo] = useState(\"\");\n    const [infoColor,setInfoColor] = useState(\"\");\n\n    const handleSubmit = async ()=>{\n        setInfo(\"\");\n        setInfoColor(\"\");\n        const validation = validateSchema(jsonSchema);\n        if(validation.valid) {\n            const creationResponse = await fetch(`${process.env.REACT_APP_ADMINCONTROLLER_URL}/write/${databaseName}/schema/new`, {\n                method:\"POST\",\n                headers: {\n                    \"content-type\":\"application/json\",\n                    \"authorization\":token\n                },\n                body: jsonSchema\n            });\n            const jsonResponse = await creationResponse.json();\n            const { status, message } = jsonResponse;\n            console.log(jsonResponse);\n            if(status === \"GOOD\") {\n                window.location.reload();\n            } else {\n                setInfoColor(\"red\");\n                setInfo(message);\n            }\n        } else {\n            setInfo(validation.info);\n            setInfoColor(validation.color);\n        }\n    }\n    \n    return (\n        <Box className=\"create-schema-wrapper\">\n            <Paper elevation={6} className=\"create-schema\">\n                <Box className=\"creation-tut\">\n                    <Typography color=\"primary\" variant=\"h4\"> <SchemaIcon /> Create a new Schema </Typography>\n                    <Divider />\n                    <Box className=\"schema-tutorial\">\n                        <Typography variant=\"h5\"> This is a simple guide to create a new schema successfully.</Typography>\n                        <Typography variant=\"h6\">\n                            There is 2 things that you need to deliver:\n                        </Typography>\n                        <Typography variant=\"h6\">\n                            1. property \"schemaName\", the schema's name.\n                        </Typography>\n                        <Typography variant=\"h6\">\n                            2. property \"schema\", the schema itself.\n                        </Typography>\n                        <Divider />\n                        <Typography variant=\"h6\">\n                            The schema property should have all fields, \n                            do not add an id property, this will be handled by the database server.\n                        </Typography>\n                    </Box>\n                    <TableContainer component={Paper}>\n                        <Table>\n                            <TableHead>\n                                <TableRow >\n                                    <TableCell align=\"center\"> Data Type </TableCell>\n                                    <TableCell align=\"center\"> Value in Schema </TableCell>\n                                    <TableCell align=\"center\"> Example Data </TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                <TableRow >\n                                    <TableCell align=\"center\"> Yes/No </TableCell>\n                                    <TableCell align=\"center\"> Boolean </TableCell>\n                                    <TableCell align=\"center\"> true, false </TableCell>\n                                </TableRow>\n                                <TableRow >\n                                    <TableCell align=\"center\"> Numbers </TableCell>\n                                    <TableCell align=\"center\"> Integer </TableCell>\n                                    <TableCell align=\"center\"> 1,2,3... </TableCell>\n                                </TableRow>\n                                <TableRow >\n                                    <TableCell align=\"center\"> Text </TableCell>\n                                    <TableCell align=\"center\"> String </TableCell>\n                                    <TableCell align=\"center\"> \"Hello, World!\" </TableCell>\n                                </TableRow>\n                                <TableRow >\n                                    <TableCell align=\"center\"> lists </TableCell> \n                                    <TableCell align=\"center\"> Array </TableCell>\n                                    <TableCell align=\"center\"> [1,2, \"Hello\", true] </TableCell>\n                                </TableRow>\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <Divider />\n                    <Box className=\"create-schema-controls\">\n                        <Button variant=\"contained\" onClick={handleSubmit}> Create Schema </Button>\n                        { info && <Typography variant=\"h6\" color={infoColor} className=\"flex-row-gap align-center padding\"> <InfoIcon /> {info} </Typography> }\n                    </Box>\n                </Box>\n                <Box className=\"create-schema-editor\">\n                    <Editor \n                        height=\"100%\"\n                        width=\"100%\"\n                        language={\"json\"}\n                        defaultValue={jsonSchema}\n                        onChange={(e) => setJsonSchema(e)}/>\n                </Box>\n            </Paper>\n        </Box>\n    );\n}\n \nexport default CreateSchema;","import React, { useState } from \"react\";\nimport { Box, Typography, Button, Paper } from \"@mui/material\";\nimport \"../styles/CreateDocument.css\";\nimport Cookies from \"universal-cookie\";\nimport Editor from \"@monaco-editor/react\";\n\nconst CreateNewDocument = (props) => {\n    const cookie = new Cookies();\n    const token = cookie.get(\"token\");\n    const { schemaName, databaseName } = props;\n    const [jsonDocument, setJsonDocument] = useState(\"{\\n}\");\n    const [info, setInfo] = useState(\"\");\n    const [infoColor, setInfoColor] = useState(\"\");\n\n    const handleCreate = async () => {\n        const creationResponse = await fetch(\n            `${process.env.REACT_APP_ADMINCONTROLLER_URL}/write/${databaseName}/${schemaName}/document/new`, {\n            method:\"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n                \"authorization\":token\n            },\n            body: jsonDocument\n        });\n\n        const jsonResponse = await creationResponse.json();\n        const { status, message } = jsonResponse;\n        if(status === \"GOOD\") {\n            setInfo(message);\n            setInfoColor(\"green\");\n        } else {\n            setInfo(message);\n            setInfoColor(\"red\");\n        }\n    }\n\n    return (\n        <Paper elevation={6} className=\"padding\" sx={{overflow:\"hidden\"}}>\n            <Box className=\"flex-row-gap create\">\n                <Box className=\"flex-col-gap\">\n                    <Typography variant=\"h4\" color=\"primary\"> Create a document for schema: \"{schemaName}\"</Typography>\n                    <Typography variant=\"h6\"> \n                        Please keep in mind that the document will be validated against the schema. \n                    </Typography>\n                    <Box>\n                        <Button variant=\"contained\" onClick={handleCreate}> Create new Document </Button>\n                    </Box>\n                    { info && <Typography color={infoColor} variant=\"h6\"> \n                        {info}\n                    </Typography> }\n                </Box>\n                <Box className=\"editor\">\n                    <Editor \n                        height=\"45rem\"\n                        width=\"100%\"\n                        language={\"json\"}\n                        defaultValue={jsonDocument}\n                        onChange={(e) => setJsonDocument(e)} />\n                </Box>\n            </Box>\n        </Paper>\n    );\n}\n \nexport default CreateNewDocument;","import React, { useState } from \"react\";\nimport { Box, Button, Paper, TextField, Typography } from \"@mui/material\";\nimport Cookies from \"universal-cookie\";\nimport Editor from \"@monaco-editor/react\";\nimport \"../styles/Indexes.css\"\n\nconst Indexes = (props) => {\n    const cookie = new Cookies();\n    const [databaseName] = useState(props.databaseName);\n    const [schemaName] = useState(props.schemaName);\n    const [indexedDocuments, setIndexedDocuments] = useState(\"[\\n]\");\n    const [fieldName, setFieldName] = useState(\"\");\n\n    const handleIndex = async () => {\n        if(!fieldName)\n            return;\n        const token = cookie.get(\"read-token\");\n        if(!token)\n            return;\n            \n        const indexResponse = await fetch(\n            `${process.env.REACT_APP_READCONTROLLER_URL}/read/${databaseName}/${schemaName}/indexed?fieldName=${fieldName}`,\n            {\n                method:\"GET\",\n                headers: {\n                    \"authorization\": token\n                }\n            });\n        const jsonResponse = await indexResponse.json();\n        setIndexedDocuments(JSON.stringify(jsonResponse.content, null, 2));\n    }\n\n\n    return (\n        <Box className=\"index-wrapper\">\n            <Paper className=\"index-controls flex-row-gap\">\n                <Typography variant=\"h4\" color=\"primary\">Index</Typography>\n                <TextField \n                    autoComplete=\"off\"\n                    label=\"Field name\" \n                    size=\"small\" \n                    value={fieldName} \n                    onChange={e=>setFieldName(e.target.value)}/>\n                <Button variant=\"contained\" onClick={handleIndex}> Fetch Indexed documents </Button>\n            </Paper>\n            <Box className=\"editor\">\n                <Editor \n                    height=\"42rem\"\n                    width=\"100%\"\n                    language={\"json\"}\n                    value={indexedDocuments}\n                    onChange={(e) => setIndexedDocuments(e)}/>\n            </Box>\n        </Box>\n    );\n}\n \nexport default Indexes;","import React, { useState } from \"react\";\nimport { Paper, Box, Button, Typography } from \"@mui/material\";\n\nimport \"../styles/Document.css\";\nimport Editor from \"@monaco-editor/react\";\nimport Cookies from \"universal-cookie\";\nimport InfoIcon from '@mui/icons-material/Info';\n\nconst Document = (props) => {\n    const cookie = new Cookies();\n    const [token] = useState(cookie.get(\"token\"));\n    const [databaseName] = useState(props.databaseName);\n    const [schemaName] = useState(props.schemaName);\n    const [fullDocument, setFullDocument] = useState(JSON.stringify(props.fullDocument, null , 2));\n    const [id] = useState(props.fullDocument._id);\n    const [infoColor, setInfoColor] = useState(\"\");\n    const [info, setInfo] = useState(\"\");\n\n    const handleUpdate = async () => {\n        setInfo(\"\");\n        setInfoColor(\"\");\n        const updateResponse = await fetch(`${process.env.REACT_APP_ADMINCONTROLLER_URL}/update/${databaseName}/${schemaName}/document?documentId=${id}`,{\n            method: \"PUT\",\n            headers: {\n                \"content-type\": \"application/json\",\n                \"authorization\": token\n            },\n            body: fullDocument\n        });\n        const updateJSON = await updateResponse.json();\n        const { message, status } = updateJSON;\n        if(status === \"GOOD\") {\n            setInfo(message);\n            setInfoColor(\"green\");\n        } else {\n            setInfo(message);\n            setInfoColor(\"red\");\n        }\n    }\n\n    const handleDelete = async () => {\n        setInfo(\"\");\n        setInfoColor(\"\");\n        const updateResponse = await fetch(`${process.env.REACT_APP_ADMINCONTROLLER_URL}/delete/${databaseName}/${schemaName}/document?documentId=${id}`,{\n            method: \"DELETE\",\n            headers: {\n                \"content-type\": \"application/json\",\n                \"authorization\": token\n            }\n        });\n        const updateJSON = await updateResponse.json();\n        const { message, status } = updateJSON;\n        if(status === \"GOOD\") {\n            setInfo(message);\n            setInfoColor(\"green\");\n        } else {\n            setInfo(message);\n            setInfoColor(\"red\");\n        }\n        setFullDocument(null);\n    }\n    \n    return ( <>\n        {!fullDocument && <></>}\n        {fullDocument && \n            <Paper className=\"full-document padding\">\n                <Box className=\"data\">\n                    <Editor \n                        options={{\n                            minimap: {\n                                enabled: false\n                            },\n                            scrollbar: {\n                                enabled: false\n                            },\n                            scrollBeyondLastLine: {\n                                enabled: false\n                            }\n                        }}\n                        height=\"15rem\"\n                        width=\"100%\"\n                        language={\"json\"}\n                        defaultValue={fullDocument}\n                        onChange={(e) => setFullDocument(e)} />\n                </Box>\n                <Box className=\"document-operations\">\n                    <Box className=\"flex-row-gap\">\n                        <Button variant=\"contained\" color=\"warning\" onClick={handleUpdate}> Update document </Button>\n                        <Button variant=\"contained\" color=\"error\" onClick={handleDelete}> Delete document </Button>\n                    </Box>\n                    { info && <Typography color={infoColor} className=\"flex-row-gap align-center\"> <InfoIcon /> {info} </Typography>}\n                </Box>\n            </Paper>\n        } </>\n    );\n}\n \nexport default Document;","import React, { useState, useEffect } from 'react';\nimport { Box, Typography, Button, List, ListItemButton, Divider, Paper,\n         Table, TableContainer, TableHead, TableRow, TableCell, TableBody,\n         TextField, Select, MenuItem, FormControl, InputLabel } from \"@mui/material\";\nimport CreateNewDocument from \"./CreateNewDocument\";\nimport Indexes from \"./Indexes\";\nimport Document from \"./Document\";\nimport Editor from '@monaco-editor/react';\nimport Cookies from 'universal-cookie';\n\nconst SchemaDetails = (props) => {\n    const { databaseName, schema, schemaName } = props;\n    \n    const cookie = new Cookies();\n    // views\n    const [view, setView] = useState(\"details\");\n\n    // updating the schema\n    const [jsonSchemaUpdate, setJsonSchemaUpdate] = useState(\"{}\");\n    const [updateInfo, setUpdateInfo] = useState(\"\");\n    const [updateInfoColor, setUpdateInfoColor] = useState(\"\");\n\n    const handleUpdateSchema = () => {\n        const token = cookie.get(\"token\");\n        fetch(\n            `${process.env.REACT_APP_ADMINCONTROLLER_URL}/update/${databaseName}/schema?schemaName=${schemaName}`,\n            {\n                method:\"PUT\",\n                headers: {\n                    \"content-type\": \"application/json\",\n                    \"authorization\": token\n                },\n                body: jsonSchemaUpdate\n            })\n        .then(response => response.json())\n        .then(data => {\n            if(data.status === \"GOOD\") {\n                setUpdateInfoColor(\"green\")\n                setUpdateInfo(data.message);\n                setTimeout(()=>{\n                    window.location.reload();\n                }, 800)\n            } else {\n                setUpdateInfoColor(\"red\");\n                setUpdateInfo(data.message);\n            }\n        })\n    }\n\n    // deleting the schema\n    const [deleteInfo, setDeleteInfo] = useState(\"\");\n    const [deleteInfoColor, setDeleteInfoColor] = useState(\"\");\n    const [deleteDocsInfo, setDeleteDocsInfo] = useState(\"\");\n    const [deleteDocsInfoColor, setDeleteDocsInfoColor] = useState(\"\");\n\n    const handleDeleteAllDocuments = () => {\n        const token = cookie.get(\"token\");\n        fetch(`${process.env.REACT_APP_ADMINCONTROLLER_URL}/delete/${databaseName}/${schemaName}/document/all`, {\n            method:\"DELETE\",\n            headers: {\n                \"authorization\": token\n            }\n        })\n        .then(response => response.json())\n        .then(data => {\n            if(data.status === \"GOOD\") {\n                setAllDocuments([]);\n                setFilteredDocuments([]);\n                setDeleteDocsInfo(data.message);\n                setDeleteDocsInfoColor(\"green\");\n            } else {\n                setDeleteDocsInfo(data.message);\n                setDeleteDocsInfoColor(\"red\");\n            }\n        })\n\n    }\n\n    const handleDeleteSchema = () => {\n        const token = cookie.get(\"token\");\n        fetch(\n            `${process.env.REACT_APP_ADMINCONTROLLER_URL}/delete/${databaseName}/schema?schemaName=${schemaName}`,{\n            method:\"DELETE\",\n            headers: {\n                \"authorization\": token\n            }\n        })\n        .then(response => response.json())\n        .then(data => {\n            if(data.status === \"GOOD\") {\n                setDeleteInfo(data.message);\n                setDeleteInfoColor(\"green\");\n                setTimeout(()=>{\n                    window.location.reload();\n                }, 800)\n            } else {\n                setDeleteInfo(data.message);\n                setDeleteInfoColor(\"red\");\n            }\n        });\n    }\n\n    // documents\n    const [allDocuments, setAllDocuments] = useState([]);\n    const [filteredDocuments, setFilteredDocuments] = useState([]);\n    const [documentsView, setDocumentsView] = useState(\"default\");\n    \n    // filter\n    const [fieldName, setFieldName] = useState(\"\");\n    const [operation, setOperation] = useState(\"equals\");\n    const [compareTo, setCompareTo] = useState(\"\");\n\n    const handleFilter = () => {\n        setFilteredDocuments([]);\n        setDocumentsView(\"filtered\")\n        const token = cookie.get(\"read-token\");\n        fetch(\n        `${process.env.REACT_APP_READCONTROLLER_URL}/read/${databaseName}/${schemaName}/filter?fieldName=${fieldName}&op=${operation}&compareTo=${compareTo}`, {\n            method:\"GET\",\n            headers: {\n                \"authorization\":token\n            }\n        })\n        .then(response => response.json())\n        .then(data => {\n            console.log(data);\n            if(data.status === \"GOOD\") {\n                setFilteredDocuments(data.content);\n            }\n        });        \n    }\n    \n    const handleResetFilter = () => {\n        setFilteredDocuments([]);\n        setDocumentsView(\"default\")\n        setFieldName(\"\");\n        setCompareTo(\"\");\n    }\n\n    const fetchDocuments = () => {\n        if(!databaseName || !schemaName)\n            return;\n        const token = cookie.get(\"read-token\");\n        fetch(`${process.env.REACT_APP_READCONTROLLER_URL}/read/${databaseName}/${schemaName}/document/all`, {\n            method:\"GET\",\n            headers: {\n                \"authorization\": token\n            }\n        })\n        .then(response => response.json())\n        .then(data => {\n            if(data.status === \"GOOD\") {\n                setAllDocuments(data.content)\n            } else {\n                console.log(data.message);\n            }\n        });\n    }\n\n    useEffect(()=> {\n        if(view === \"documents\") {\n            fetchDocuments();\n        }\n    }, [view]);\n\n    useEffect(() => {\n        fetchDocuments();\n        setView(\"details\")\n    },[schemaName])\n\n    return (\n        <Box className=\"schema-details\">\n            <Box className=\"schema-interaction-controls\" sx={{borderRight:1, borderColor:'divider'}}>\n                <Typography className=\"connected-to\" color=\"primary\" variant=\"h4\" sx={{borderBottom:1, borderColor:\"divider\"}}> \n                    Connected To {schemaName} \n                </Typography>\n                <List>\n                    <ListItemButton onClick={e => setView(\"details\")}>\n                        <Typography color=\"primary\" variant=\"h6\"> Schema details </Typography>\n                    </ListItemButton>\n                    <Divider />\n                    <ListItemButton onClick={e => setView(\"documents\")}>\n                        <Typography color=\"primary\" variant=\"h6\"> Documents </Typography>\n                    </ListItemButton>\n                    <Divider />\n                    <ListItemButton onClick={e => setView(\"create\")}>\n                        <Typography color=\"primary\" variant=\"h6\"> Create new document </Typography>\n                    </ListItemButton>\n                    <Divider />\n                    <ListItemButton onClick={e => setView(\"indexes\")}>\n                        <Typography color=\"primary\" variant=\"h6\"> Indexes </Typography>\n                    </ListItemButton>\n                </List>\n            </Box>\n            <Box className=\"schema-view-details\">\n                { view === \"details\" && \n                    <Box className=\"section part flex-col-gap\">\n                        <Paper elevation={6} className=\"flex-col-gap part\">\n                            <Typography variant=\"h4\" color=\"primary\"> Schema's Fields </Typography>\n                            <Box className=\"small-width\">\n                                <TableContainer component={Paper}>\n                                    <Table>\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell align=\"center\">\n                                                    Field name\n                                                </TableCell>\n                                                <TableCell align=\"center\">\n                                                    Field Type\n                                                </TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {\n                                                schema && Object.keys(schema).map((fieldName, idx) => {\n                                                    return (\n                                                        <TableRow key={idx}>\n                                                            <TableCell align=\"center\">\n                                                                {fieldName}\n                                                            </TableCell>\n                                                            <TableCell align=\"center\">\n                                                                {schema[fieldName]}\n                                                            </TableCell>\n                                                        </TableRow>\n                                                    )\n                                                })\n                                            }\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                            </Box>\n                        </Paper>\n                        <Paper elevation={6} className=\"flex-col-gap part\">\n                            <Typography color=\"darkorange\" variant=\"h4\"> Update schema </Typography>\n                            <Typography color=\"darkorange\" variant=\"h6\"> \n                                Updates that happen on a schema are not inflicted on documents. \n                            </Typography>\n                            <Box>\n                                <Editor \n                                    className=\"min-height\"\n                                    height=\"25rem\"\n                                    width=\"100%\"\n                                    language={\"json\"}\n                                    value={jsonSchemaUpdate}\n                                    onChange={(e) => setJsonSchemaUpdate(e)} />\n                            </Box>\n                            <div className=\"flex-row-gap align-center\">\n                                <Button color=\"warning\" variant=\"contained\" onClick={handleUpdateSchema}> Update schema </Button>\n                                { updateInfo && <Typography variant=\"h6\" color={updateInfoColor}> {updateInfo} </Typography> }\n                            </div>\n                        </Paper>\n                        <Paper elevation={6} className=\"flex-col-gap part\">\n                            <Typography color=\"error\" variant=\"h4\"> Danger Zone </Typography>\n                            <Typography color=\"error\" variant=\"h6\">\n                                Delete all documents\n                            </Typography>\n                            <div className=\"flex-row-gap align-center\">\n                                <Button color=\"error\" variant=\"contained\" onClick={handleDeleteAllDocuments}> Delete all documents </Button>\n                                { deleteDocsInfo && <Typography variant=\"h6\" color={deleteDocsInfoColor}> {deleteDocsInfo} </Typography> }                                \n                            </div>\n                            <Typography color=\"error\" variant=\"h6\"> \n                                Deleting the schema will also delete all its documents.\n                            </Typography>\n                            <div className=\"flex-row-gap align-center\">\n                                <Button color=\"error\" variant=\"contained\" onClick={handleDeleteSchema}> Delete Schema </Button>\n                                { deleteInfo && <Typography variant=\"h6\" color={deleteInfoColor}> {deleteInfo} </Typography> }                                \n                            </div>\n                        </Paper>\n                    </Box>\n                }\n                { view === \"documents\" && \n                    <Box className=\"section flex-col-gap\">\n                        <Paper className=\"flex-row-gap padding align-center\">\n                            <Typography color=\"primary\" variant=\"h6\">Filter</Typography>\n                            <Box className=\"padding filter-inputs flex-row-gap\">\n                                <TextField \n                                    autoComplete=\"off\" \n                                    size=\"small\" \n                                    variant=\"outlined\" \n                                    label=\"Field Name\" \n                                    value={fieldName}\n                                    onChange={(e)=>{ setFieldName(e.target.value)}}/>\n                                <FormControl sx={{ minWidth: 220 }} size=\"small\">\n                                    <InputLabel id=\"select-small\">Operation</InputLabel>\n                                    <Select\n                                        labelId=\"select-small\"\n                                        id=\"select-small\"\n                                        label=\"Operation\"\n                                        value={operation}\n                                        onChange={e => setOperation(e.target.value)}\n                                        color=\"primary\">\n                                        <MenuItem value={\"equals\"}> == </MenuItem>\n                                        <MenuItem value={\"notEquals\"}> != </MenuItem>\n                                    </Select>\n                                </FormControl>\n                                <TextField \n                                    autoComplete=\"off\" \n                                    size=\"small\" \n                                    variant=\"outlined\" \n                                    label=\"Compare To\" \n                                    value={compareTo}\n                                    onChange={(e)=>{ setCompareTo(e.target.value)}}/>\n                            </Box>\n                            <Box className=\"flex-row-gap\">\n                                <Button variant=\"contained\" color=\"success\" onClick={handleFilter}> Filter </Button>\n                                <Button variant=\"contained\" color=\"success\" onClick={handleResetFilter}> Refresh </Button>\n                            </Box>\n                        </Paper>\n                        <Box className=\"all-documents flex-col-gap\">\n                            { documentsView === \"default\" && allDocuments &&\n                                allDocuments.map((document, idx) => {\n                                    return (\n                                        <Document key={idx} \n                                            databaseName={databaseName}\n                                            schemaName={schemaName}\n                                            fullDocument={document} />\n                                    )\n                                })\n                            }\n                            { documentsView === \"filtered\" && filteredDocuments &&\n                                filteredDocuments.map((document, idx) => {\n                                    return (\n                                        <Document key={idx} \n                                            databaseName={databaseName}\n                                            schemaName={schemaName}\n                                            fullDocument={document} />\n                                    )\n                                })\n                            }\n                        </Box>\n                    </Box>\n                }\n                { view === \"create\" && \n                    <Box className=\"padding\">\n                        <CreateNewDocument schemaName={schemaName} databaseName={databaseName}/>\n                    </Box>\n                }\n                { view === \"indexes\" && \n                    <Box className=\"padding\"> \n                        <Indexes schemaName={schemaName} databaseName={databaseName}/>\n                    </Box>\n                }\n            </Box>\n        </Box> \n    );\n}\n \nexport default SchemaDetails;","import React, { useState } from 'react';\nimport { Box, Button } from \"@mui/material\";\nimport SchemaIcon from '@mui/icons-material/Schema';\nimport SchemaDetails from './SchemaDetails';\nimport \"../styles/AllSchemas.css\";\n\nconst Schemas = (props) => {\n    const { schemas, schemaNames, databaseName } = props;\n    const [schemaName, setSchemaName] = useState(\"\");\n    const [schemaConnectedTo, setSchemaConnectedTo] = useState({});\n    const [connectedToSchema, setConnectedToSchema] = useState(false);\n\n    const handleChangeSchema = (name) => {\n        setSchemaName(name);\n        setSchemaConnectedTo(schemas[name]);\n        setConnectedToSchema(true);\n    }\n\n    return (\n        <Box className=\"all-schemas\">\n            <Box className=\"schema-controls align-center\" sx={{borderBottom:1, borderColor:\"divider\"}}>\n                <SchemaIcon color=\"primary\"/>\n                { schemaNames && schemaNames.map((schemaName, idx) => {\n                    return ( \n                        <Button \n                            key={idx}\n                            value={schemaName} \n                            size=\"medium\"\n                            onClick={e => handleChangeSchema(e.target.value)}> {schemaName} </Button>\n                    )\n                }) }\n            </Box>\n            { connectedToSchema && <SchemaDetails schemaName={schemaName} schema={schemaConnectedTo} databaseName={databaseName} />}\n        </Box>\n    );\n}\n \nexport default Schemas;","import React, { useState, useEffect } from 'react';\nimport Cookies from 'universal-cookie';\n\nimport { Box, Tabs, Tab, Typography, Button, Paper } from '@mui/material';\nimport CreateSchema from './CreateSchema';\n\nimport \"../styles/DatabaseInformation.css\";\nimport Schemas from './Schemas';\n\nconst DatabaseInformation = (props) => {\n    const cookie = new Cookies();\n    const { databaseName } = props;\n\n    // database related\n    const [schemas, setSchemas] = useState({});\n    const [schemaNames, setSchemaNames] = useState([]);\n\n    const parseSchemas = (rawSchemas) => {\n        const schemaNames = [];\n        const schemasAsJSONObject = {};\n\n        rawSchemas.forEach((fullSchema) => {\n            const { schema, info } = fullSchema;\n            schemasAsJSONObject[info.schema_name] = schema;\n            schemaNames.push(info.schema_name);\n        });\n\n        setSchemaNames(schemaNames);\n        setSchemas(schemasAsJSONObject);\n    }\n\n    const handleDeleteDatabase = () => {\n        const token = cookie.get(\"token\");\n        fetch(`${process.env.REACT_APP_ADMINCONTROLLER_URL}/admin/database/delete?databaseName=${databaseName}`,\n        {\n            method:\"DELETE\",\n            headers: {\n                \"authorization\": token\n            }\n        })\n        .then(response => response.json())\n        .then(data => {\n            if(data.status === \"GOOD\") {\n                window.location.reload();\n            } else {\n                console.log(data.message);\n            }\n        })\n    }\n\n    // view related\n    const [currentView , setCurrentView] = useState(\"database-info\");\n\n    const handleTabChange = (e, viewName) => {\n        setCurrentView(viewName);\n    }\n\n    // exporting\n    const handleExport = () => {\n        const databaseSchema = {\n            databaseName: databaseName,\n            schemas\n        };\n\n        const jsonString = `data:text/json;chatset=utf-8,${encodeURIComponent(\n            JSON.stringify(databaseSchema, null, 2)\n        )}`;\n\n        const link = document.createElement(\"a\");\n        link.href = jsonString;\n        link.download = \"databaseSchema.json\";\n    \n        link.click();\n    }\n\n\n    useEffect(() => {\n        setCurrentView(\"database-info\")\n        const token = cookie.get(\"read-token\");\n        fetch(`${process.env.REACT_APP_READCONTROLLER_URL}/read/${databaseName}/schema/all`, {\n            method:\"GET\",\n            headers: {\n                \"authorization\": token\n            }\n        })\n        .then(response => response.json())\n        .then((data) => {\n            if(data.status === \"GOOD\") {\n                parseSchemas(data.content);\n            }\n        });\n    }, [databaseName]);\n\n    return (\n        <Box className=\"db-information\">\n            <Box className=\"view-controls flex-row-gap align-center\" sx={{borderBottom:1, borderColor:'divider'}}>\n                <Typography color=\"green\" fontWeight={\"bold\"}> Connected To {databaseName} </Typography>\n                <Tabs   value={currentView}\n                        onChange={handleTabChange}\n                        textColor=\"primary\"\n                        indicatorColor='primary'>\n                    <Tab value=\"database-info\" label=\"Database Information\" />\n                    <Tab value=\"create-new-schema\" label=\"Create New Schema\" />\n                    <Tab value=\"schemas\" label=\"Schemas\" />\n                </Tabs>\n            </Box>\n            { currentView === \"database-info\" &&\n                <Box className=\"flex-col-gap section\"> \n                    <Box className=\"padding section-col\" component={Paper}>\n                        <Typography variant=\"h4\" color=\"primary\"> Export Database Schema </Typography>\n                        <Typography variant=\"h6\"> \n                            Exporting provides a json file that contains the \n                            database name, and the schemas which can be used again to import.\n                        </Typography>\n                        <Box><Button variant=\"contained\" onClick={handleExport}> Export </Button></Box>\n                    </Box> \n                    <Box className=\"padding section-col\" component={Paper}>\n                        <Typography variant=\"h4\" color=\"red\"> Danger Zone </Typography>\n                        <Typography variant=\"h6\" color=\"red\"> \n                            Deleting a database deletes all its information including schemas, and the documents.\n                        </Typography>\n                        <Box><Button variant=\"contained\" color=\"error\" onClick={handleDeleteDatabase}> Delete Database </Button></Box>\n                    </Box>\n                </Box>\n            }\n            { currentView === \"create-new-schema\" && <CreateSchema databaseName={databaseName}/>}\n            { currentView === \"schemas\" && <Schemas schemas={schemas} schemaNames={schemaNames} databaseName={databaseName} />}\n        </Box>\n    );\n}\n \nexport default DatabaseInformation;","import React, { useEffect, useState } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport { Typography, TextField, Button, Paper } from \"@mui/material\";\nimport { validateSchema } from \"../utils/validation\";\nimport \"../styles/CreateDatabase.css\";\n\nconst CreateDatabase = (props) => {\n    const cookie = new Cookies();\n    // creation from name\n    const [databaseName, setDatabaseName] = useState(\"\");\n    const [createInfo, setCreateInfo] = useState(\"\");\n    // creation from import\n    const [importInfo, setImportInfo] = useState(\"\");\n    const [importInfoColor, setImportInfoColor] = useState(\"\");\n    const [importedDatabaseName, setImportedDatabaseName] = useState(\"\");\n    const [importedSchemas, setImportedSchemas] = useState([]);\n\n    const handleCreateDatabase = async () => {\n        setCreateInfo(\"\");\n        if(databaseName == null || databaseName === \"\") {\n            setCreateInfo(\"Database name cannot be null or empty\");\n            return;\n        }\n        \n        const token = cookie.get(\"token\");\n        const creationResponse = await fetch(`${process.env.REACT_APP_ADMINCONTROLLER_URL}/admin/database/new?databaseName=${databaseName}`, {\n            method:\"POST\",\n            headers: {\n                \"authorization\": token\n            }\n        });\n\n        const jsonResponse = await creationResponse.json();\n        if(jsonResponse.status === \"GOOD\") {\n            window.location.reload()\n        } else {\n            setCreateInfo(jsonResponse.message);\n        }\n    }\n\n    const handleSubmitImport = async () => {\n        const token = cookie.get(\"token\");\n        const creationResponse = await fetch(\n            `${process.env.REACT_APP_ADMINCONTROLLER_URL}/admin/database/new?databaseName=${importedDatabaseName}`, \n            {\n                method:\"POST\",\n                headers: {\n                    \"authorization\": token\n                }\n            }\n        );\n\n        const jsonResponse = await creationResponse.json();\n        if(jsonResponse.status === \"GOOD\") {\n            importedSchemas.forEach( (schema) => {\n                fetch(\n                    `${process.env.REACT_APP_ADMINCONTROLLER_URL}/write/${importedDatabaseName}/schema/new`, {\n                    method:\"POST\",\n                    headers: {\n                        \"content-type\":\"application/json\",\n                        \"authorization\":token\n                    },\n                    body: schema\n                })\n                .then(response => response.json())\n                .then(data => console.log(data));\n            });\n            window.location.reload();\n        } else {\n            setImportInfo(jsonResponse.message);\n            setImportInfoColor(\"red\");\n        }\n    }\n\n    const handleImport = (e) => {\n        setImportInfo(``);\n        setImportInfoColor(\"\");\n        setImportedDatabaseName(\"\");\n        setImportedSchemas([]);\n        try {\n            const fileReader = new FileReader();\n            fileReader.readAsText(e.target.files[0], \"UTF-8\");\n            fileReader.onload = e => {\n                const { databaseName, schemas } = JSON.parse(e.target.result);\n                if(databaseName === null || databaseName === \"\") {\n                    setImportInfo(\"database name cannot be null.\");\n                    setImportInfoColor(\"red\");\n                    return;\n                }\n\n                if(schemas === null || schemas === {} || schemas === undefined){\n                    setImportInfo(\"database name cannot be null.\");\n                    setImportInfoColor(\"red\");\n                    return;\n                }\n\n                const schemasArr = [];\n                const schemaNames = Object.keys(schemas);\n                for(var schemaIndex = 0; schemaIndex < schemaNames.length; schemaIndex++) {\n                    var schemaName = schemaNames[schemaIndex];\n                    var schema = schemas[schemaName];\n                    console.log(schema);\n                    var _fullSchema = JSON.stringify({schemaName, schema});\n                    const validation = validateSchema(_fullSchema);\n                    schemasArr.push(_fullSchema);\n                    if(!validation.valid){\n                        setImportInfo(`Schema is invalid: ${schemaName}`);\n                        setImportInfoColor(\"red\");\n                        return;\n                    }\n                }\n\n                setImportInfo(`Database schema is valid`);\n                setImportInfoColor(\"green\");\n                setImportedDatabaseName(databaseName);\n                setImportedSchemas(schemasArr);\n            }\n        } catch (e) {\n            setImportInfo(\"Invalid database schema\");\n            setImportInfoColor(\"red\");\n        }\n    }\n\n    useEffect(()=>{\n        const token = cookie.get(\"token\");\n        if(!token) {\n            window.location.assign(\"/\"); \n        } else {\n            fetch(`${process.env.REACT_APP_ADMINCONTROLLER_URL}/auth/user/verifyAdmin`, {\n                method:\"GET\",\n                headers: {\n                    \"authorization\": token\n                }\n            })\n            .then((response) => response.json())\n            .then((data) => {\n                if(data.status !== \"GOOD\") {\n                    cookie.remove(\"token\");\n                    window.location.assign(\"/\");\n                }\n            });\n        }\n    }, [])\n\n    return (\n        <Paper elevation={6} className=\"create-database flex-col-gap\">\n            <Typography color=\"primary\" variant=\"h5\"> Create a new database </Typography>\n            <TextField \n                autoComplete=\"off\"\n                size=\"large\" \n                label=\"Database Name\" \n                value={ databaseName || \"\" }\n                onChange={e => setDatabaseName(e.target.value)}\n            />\n            <Button variant=\"contained\" onClick={handleCreateDatabase}> Create Database </Button>\n            { createInfo && <Typography variant=\"h6\" color=\"red\"> {createInfo} </Typography>  }\n            <Typography color=\"primary\" variant=\"h5\"> Or import a database schema </Typography>\n            <Button variant=\"outlined\" component=\"label\"> Upload Database Schema <input type=\"file\" onChange={handleImport} hidden/></Button>\n            { importInfo && <Typography variant=\"h6\" color={importInfoColor}> { importInfo } </Typography> }\n            <Button variant=\"contained\" onClick={handleSubmitImport}> Create database from schema </Button>\n        </Paper> \n    );\n}\n \nexport default CreateDatabase;","import React, { useState } from 'react';\nimport Editor from '@monaco-editor/react';\nimport { Paper, Box, Button, Typography } from \"@mui/material\";\nimport InfoIcon from '@mui/icons-material/Info';\nimport Cookies from 'universal-cookie';\n\nconst UserDocument = (props) => {\n    const { userData } = props;\n    const cookie = new Cookies();\n    const [token] = useState(cookie.get(\"token\"));\n    const [user, setUser] = useState(JSON.stringify(userData, null, 2));\n    const [info, setInfo] = useState(\"\");\n    const [infoColor, setInfoColor] = useState(\"\");\n\n    const handleDelete = () => {\n        fetch(`${process.env.REACT_APP_ADMINCONTROLLER_URL}/admin/user/delete`, {\n            method:\"DELETE\",\n            headers : {\n                \"content-type\": \"application/json\",\n                \"authorization\": token\n            },\n            body: user\n        })\n        .then(response => response.json())\n        .then(data => {\n            if(data.status === \"GOOD\") {\n                setInfo(data.message);\n                setInfoColor(\"green\");\n                setTimeout(()=>{setUser(null)}, 750);\n            } else {\n                setInfo(data.message);\n                setInfoColor(\"red\");\n            }\n        })\n    }\n\n    return (\n        <>\n            {!user && <></>}\n            {user && \n                <Paper className=\"full-document padding\">\n                    <Box className=\"data\">\n                        <Editor \n                            options={{\n                                minimap: {\n                                    enabled: false\n                                },\n                                scrollbar: false,\n                                scrollBeyondLastLine: false\n                            }}\n                            height=\"15rem\"\n                            width=\"100%\"\n                            language={\"json\"}\n                            defaultValue={user}\n                            onChange={(e) => setUser(e)} />\n                    </Box>\n                    <Box className=\"document-operations\">\n                        <Box className=\"flex-row-gap\">\n                            <Button variant=\"contained\" color=\"error\" onClick={handleDelete}> Delete User </Button>\n                        </Box>\n                        { info && <Typography color={infoColor} className=\"flex-row-gap align-center\"> <InfoIcon /> {info} </Typography>}\n                    </Box>\n                </Paper>\n            } \n        </>\n    );\n}\n \nexport default UserDocument;","import React, { useState, useEffect } from 'react';\nimport Cookies from 'universal-cookie';\n\nimport { Box, List, Divider, Typography, ListItemButton, TextField,\n         InputLabel, Select, MenuItem, FormControl, Button } from '@mui/material';\nimport InfoIcon from '@mui/icons-material/Info';\n\nimport UserDocument from './UserDocument';\nimport \"../styles/AllUsers.css\";\n\nconst UserControls = (props) => {\n    const cookie = new Cookies();\n    const [token] = useState(cookie.get(\"token\"));\n    const [view, setView] = useState('all-users');\n\n    const [allUsers, setAllUsers] = useState([]);\n\n    const fetchAllUsers = () => {\n        fetch(`${process.env.REACT_APP_ADMINCONTROLLER_URL}/admin/user/all`, {\n            method:\"GET\",\n            headers: {\n                \"authorization\": token\n            }\n        })\n        .then(response => response.json())\n        .then(data => {\n            if(data.status === \"GOOD\") {\n                setAllUsers(data.content);\n            }   \n        });\n    }\n\n    const [newUsername, setNewUsername] = useState(\"\");\n    const [newPassword, setNewPassword] = useState(\"\");\n    const [newRole, setNewRole] = useState(\"REGULAR\");\n    const [info, setInfo] = useState(\"\");\n    const [infoColor, setInfoColor] = useState(\"\");\n\n    const handleChange = (e) => {\n        setNewRole(e.target.value);\n    }\n\n    const handleSubmitNewUser = () => {\n        if(newUsername === null || newUsername === \"\"){\n            setInfo(\"Username cannot be empty/null\");\n            setInfoColor(\"red\");\n            return;\n        }\n        if(newPassword === null || newPassword === \"\"){\n            setInfo(\"Password cannot be empty/null\");\n            setInfoColor(\"red\");\n            return;\n        }\n\n        fetch(`${process.env.REACT_APP_ADMINCONTROLLER_URL}/admin/user/new`, {\n            method:\"POST\",\n            headers: {\n                \"content-type\":\"application/json\",\n                \"authorization\": token\n            },\n            body: JSON.stringify({username: newUsername, password: newPassword, role: newRole})\n        })\n        .then(response => response.json())\n        .then(data => {\n            if(data.status === \"GOOD\") {\n                setInfo(data.message);\n                setInfoColor(\"green\");\n            } else {\n                setInfo(data.message);\n                setInfoColor(\"red\");\n            }\n        });\n    }\n\n    useEffect(()=>{\n        if(view === \"all-users\") {\n            fetchAllUsers();\n        }\n    }, [view]);\n\n    useEffect(()=>{\n        fetchAllUsers();\n    }, []);\n\n    return (\n        <Box className=\"users-controls\">\n            <List className=\"view-controls\">\n                <ListItemButton onClick={e => setView(\"all-users\")}>\n                    <Typography color=\"primary\" variant=\"h6\"> All Users </Typography>\n                </ListItemButton>\n                <Divider />\n                <ListItemButton onClick={e => setView(\"create-user\")}>\n                    <Typography color=\"primary\" variant=\"h6\"> Create new User </Typography>\n                </ListItemButton>\n            </List>\n            <Box className=\"body overflow-scroll\">\n                <Box className=\"flex-col-gap\">\n                    { view === \"all-users\" && \n                        Object.keys(allUsers).map((key) => {\n                            return (\n                                <UserDocument key={key} userData={allUsers[key]}  />\n                            )\n                        })\n                    }\n                    { view === \"create-user\" && \n                        <Box className=\"create-user flex-col-gap\">\n                            <Typography variant=\"h4\" color=\"primary\"> Create a new User </Typography>\n                            <Typography variant=\"h6\"> Roles: </Typography>\n                            <Typography variant=\"h6\"> - Admin: is allowed to perform CRUD operations on the databases. </Typography>\n                            <Typography variant=\"h6\"> - Regular: is only allowed to read from the databases. </Typography>\n                            <Divider />\n                            <Box className=\"flex-col-gap main-form\">\n                                <TextField value={newUsername} autoComplete=\"off\" onChange={e => setNewUsername(e.target.value)} label=\"Username\" />\n                                <TextField value={newPassword} autoComplete=\"off\" onChange={e => setNewPassword(e.target.value)} label=\"Password\" />\n                                <FormControl>\n                                    <InputLabel id=\"role-label\">Role</InputLabel>\n                                    <Select\n                                        labelId=\"role-label\"\n                                        id=\"role-label\"\n                                        value={newRole}\n                                        label=\"Role\"\n                                        onChange={handleChange}>\n                                        <MenuItem value={\"ADMIN\"}>Admin</MenuItem>\n                                        <MenuItem value={\"REGULAR\"}>Regular</MenuItem>\n                                    </Select>\n                                </FormControl>\n                                <Box className=\"flex-col-gap\">\n                                    <Button variant=\"contained\" onClick={handleSubmitNewUser}> Create new User </Button>\n                                    { info && \n                                        <Typography variant=\"h5\" className=\"flex-row-gap align-center\" color={infoColor}> \n                                            <InfoIcon /> {info} \n                                        </Typography>\n                                    }\n                                </Box>\n                            </Box>\n                        </Box>\n                    }\n                </Box>\n            </Box>\n        </Box>\n    );\n}\n \nexport default UserControls;","import React, { useState } from 'react';\nimport { Typography,Box, Paper, Button } from '@mui/material';\nimport Cookies from 'universal-cookie';\n\nconst Node = (props) => {\n    const { hostname, state, ip, containerName } = props.info;\n    const cookie = new Cookies();\n    const [readToken] = useState(cookie.get(\"read-token\"));\n    const [info, setInfo] = useState(\"\");\n    const [infoColor, setInfoColor] = useState(\"\");\n\n    const handleRefreshCache = () => {\n        fetch(`http://${ip}:8001/read/cache/refresh`, {\n            method:\"GET\",\n            headers: {\n                \"authorization\": readToken\n            }\n        })\n        .then(response => response.json())\n        .then(data => {\n            console.log(data);\n            if(data.status === \"GOOD\") {\n                setInfo(data.message);\n                setInfoColor(\"green\");\n                setTimeout(() => {setInfo(\"\");setInfoColor(\"\");}, 1500);\n            } else {\n                setInfo(data.message);\n                setInfoColor(\"red\");    \n            }\n        })\n    }\n\n    return (\n        <Paper elevation={6} className=\"node flex-col-gap\">\n            <Typography variant=\"h6\" color=\"primary\"> Node Hostname : {hostname} </Typography>\n            <Typography variant=\"h6\" color=\"primary\"> Node Name : {containerName.substr(1)} </Typography>\n            <Typography variant=\"h6\" color=\"primary\"> Node State : {state} </Typography>\n            <Typography variant=\"h6\" color=\"primary\"> Node IP : {ip} </Typography>\n            <Box className=\"flex-row-gap\">\n                <Button size=\"large\" variant=\"contained\" onClick={handleRefreshCache}> Refresh Cache </Button>\n                { info && <Typography color={infoColor} variant=\"h6\" className=\"flex-row-gap align-center\"> { info } </Typography> }\n            </Box>\n        </Paper>\n    );\n}\n \nexport default Node;","import React, { useEffect, useState } from 'react';\nimport { Box, Typography, Paper, Button, TextField } from '@mui/material';\nimport Node from './Node';\n\nimport \"../styles/Cluster.css\";\nimport Cookies from 'universal-cookie';\n\nconst ClusterControls = (props) => {\n    const cookie = new Cookies();\n    const [containersInformation, setContainersInformation] = useState([]);\n    const [info, setInfo] = useState(\"\");\n    const [infoColor, setInfoColor] = useState(\"\");\n    const [refreshInfo, setRefreshInfo] = useState(\"\");\n    const [refreshInfoColor, setRefreshInfoColor] = useState(\"\");\n    const [scaleInfo, setScaleInfo] = useState(\"\");\n    const [scaleInfoColor, setScaleInfoColor] = useState(\"\");\n    const [numberOfNodes, setNumberOfNodes] = useState(3);\n\n    const handleRefreshAllCaches = () => {\n        const readToken = cookie.get(\"read-token\");\n        containersInformation.forEach(({ip}) => {\n            fetch(`http://${ip}:8001/read/cache/refresh`, {\n                method:\"GET\",\n                headers: {\n                    \"authorization\": readToken\n                }\n            })\n            .then(response => response.json())\n            .then(data => {\n                    console.log(data);\n                    if(data.status === \"GOOD\") {\n                        setRefreshInfo(data.message);\n                        setRefreshInfoColor(\"green\");\n                        setTimeout(() => {setRefreshInfo(\"\")}, 1500);\n                    } else {\n                        setRefreshInfo(data.message);\n                        setRefreshInfoColor(\"red\");\n                    }\n                })\n            })\n    }\n\n    const handleScaleCluster = () => {\n        fetch(`${process.env.REACT_APP_CONTAINERDISCOVERY_URL}/cluster/scale/${numberOfNodes}`, {\n            method:\"POST\"\n        })\n        .then(response => response.json())\n        .then(data => {\n            if(data.status === \"GOOD\") {\n                setScaleInfo(data.message);\n                setScaleInfoColor(\"green\");\n            } else {\n                setScaleInfo(data.message);\n                setScaleInfoColor(\"red\");\n            }\n        }) \n    }\n\n    useEffect(() => {\n        fetch(`${process.env.REACT_APP_CONTAINERDISCOVERY_URL}/cluster/nodes`, {\n            method:\"GET\"\n        })\n        .then((response) => response.json())\n        .then((data) => {\n            if(data.status === \"GOOD\") {\n                setContainersInformation(data.content);\n            } else {\n                setInfo(data.message);\n                setInfoColor(\"red\");\n            }\n        });\n    }, []);\n\n    return (\n        <Box className=\"cluster flex-col-gap\">\n            <Paper elevation={6} className=\"padding\">\n                <Typography variant=\"h4\" color=\"primary\"> Nodes </Typography>\n            </Paper>\n            <Paper elevation={6} className=\"padding flex-row-gap align-center\">\n                <Typography variant=\"h5\" color=\"primary\"> Scale the cluster </Typography>\n                <TextField variant=\"outlined\" color=\"primary\" label=\"Number of Nodes\" value={numberOfNodes} onChange={e => setNumberOfNodes(e.target.value)} />\n                <Button variant=\"contained\" onClick={handleScaleCluster}> Scale </Button>\n                { scaleInfo && <Typography color={scaleInfoColor}> {scaleInfo} </Typography> }\n            </Paper>\n            <Paper elevation={6} className=\"padding flex-row-gap align-center\">\n                <Typography variant=\"h5\" color=\"primary\"> Refresh All Caches </Typography>\n                <Button variant=\"contained\" onClick={handleRefreshAllCaches}> Refresh </Button>\n                { refreshInfo && <Typography color={refreshInfoColor}> {refreshInfo} </Typography> }\n            </Paper>\n            { containersInformation && \n                <Box className=\"grid\">\n                    {\n                        containersInformation.map( (containerInfo, idx) => {\n                            return ( <Node info={containerInfo} key={idx} /> )\n                        }) \n                    }\n                </Box>\n            }\n            { (info) && <Typography variant=\"h5\" color={infoColor}> {info} </Typography>}\n        </Box>\n    );\n}\n \nexport default ClusterControls;","import React, { useState, useEffect } from \"react\";\nimport Cookies from \"universal-cookie\";\n// components\nimport { Box, Typography, Button, Divider } from \"@mui/material\";\nimport StorageIcon from '@mui/icons-material/Storage';\nimport { DatabaseInformation, CreateDatabase, UserControls } from \"../components\";\n\n// styles\nimport \"../styles/Dashboard.css\"\nimport ClusterControls from \"../components/ClusterControls\";\n\nconst Dashboard = (props) => {\n    const cookie = new Cookies();\n\n    // database related\n    const [allDatabases, setAllDatabases] = useState([]);\n    const [databaseConnectedTo, setDatabaseConnectedTo] = useState(\"\");\n    const [connectedToDatabase, setConnectedToDatabase] = useState(false);\n\n    const handleDatabaseChange = (dbName) => {\n        setDatabaseConnectedTo(dbName);\n        setConnectedToDatabase(true);\n    }\n\n    // view controls\n    const [mainView, setMainView] = useState(\"database\");\n\n    const handleMainViewChange = (view) => {\n        setMainView(view);\n        setConnectedToDatabase(false);\n        setDatabaseConnectedTo(\"\");\n    }\n\n    const handleLogout = () => {\n        cookie.remove(\"token\");\n        cookie.remove(\"read-token\");\n        window.location.assign(\"/\");\n    }\n\n    // Effect handlers\n    useEffect(() => {\n        // fetch database names from server\n        const token = cookie.get(\"token\");\n        if(!token)\n            return;\n        fetch(`${process.env.REACT_APP_ADMINCONTROLLER_URL}/admin/database/all`, {\n            method:\"GET\",\n            headers: {\n                \"authorization\": token\n            }\n        })\n        .then((response) => response.json())\n        .then((data) => {\n            if(data.status === \"GOOD\") {\n                setAllDatabases(data.content);\n            }\n        })\n    }, []);\n\n    useEffect(() => {\n        // check validity of token\n        const token = cookie.get(\"token\");\n        if(!token) {\n            window.location.assign(\"/\");\n        } else {\n            fetch(`${process.env.REACT_APP_ADMINCONTROLLER_URL}/auth/user/verifyAdmin`, {\n                method:\"GET\",\n                headers: {\n                    \"authorization\": token\n                }\n            })\n            .then((response) => response.json())\n            .then((data) => {\n                if(data.status !== \"GOOD\") {\n                    cookie.remove(\"token\");\n                    window.location.assign(\"/\");\n                }\n            });\n        }\n    }, []);\n\n    return (\n        <Box className=\"dashboard\">\n            <Box className=\"header\">\n                <Box className=\"sub-header-1\">\n                    <Typography variant=\"h6\"> \n                        <Typography variant=\"h6\" color=\"primary\" component=\"span\">ATYPON</Typography> NoSQL Dashboard \n                    </Typography>\n                    <Box className=\"links\">\n                        <Button onClick={() => handleMainViewChange(\"database\")}> Database Controls </Button>\n                        <Button onClick={() => handleMainViewChange(\"users\")}> Users </Button>\n                        <Button onClick={() => handleMainViewChange(\"cluster\")}> Cluster Controls </Button>\n                    </Box>\n                    <Box className=\"logout\">\n                        <Button variant=\"contained\" size=\"small\" onClick={handleLogout}> Logout </Button>\n                    </Box>\n                </Box>\n                <Divider/>\n                { mainView === \"database\" &&\n                    <>\n                        <Box className=\"sub-header-2 align-center\">\n                            <Typography className=\"flex-row align-center\" variant=\"h6\">\n                                <StorageIcon fontSize=\"medium\" color=\"primary\" />\n                            </Typography>\n                            { \n                                allDatabases.map((databaseName, idx) => {\n                                    return ( <Button value={databaseName} size=\"medium\" key={idx}\n                                                    onClick={e => handleDatabaseChange(e.target.value)}> {databaseName} </Button> )\n                                }) \n                            }\n                        </Box>\n                        <Divider/>\n                    </>\n                }\n            </Box>\n            <Box className=\"main-body\">\n                { mainView === \"database\" && \n                    <Box className=\"create-database-wrapper\"> \n                        { !connectedToDatabase && <CreateDatabase />}\n                        { connectedToDatabase && <DatabaseInformation databaseName={databaseConnectedTo} /> }\n                    </Box> \n                }\n                { mainView === \"cluster\" && <ClusterControls /> }\n                { mainView === \"users\" && <UserControls /> }\n            </Box>\n        </Box>\n    );\n}\n \nexport default Dashboard;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n// views\nimport { Login, ChangeCredentials, Dashboard } from \"./views\";\n\nimport \"./styles/global.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route exact path=\"/\" element={ <Login/> } />\n        <Route exact path=\"/creds\" element={ <ChangeCredentials /> } />\n        <Route exact path=\"/dashboard\" element={ <Dashboard /> } />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"sourceRoot":""}